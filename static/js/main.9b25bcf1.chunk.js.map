{"version":3,"sources":["Components/AddExpense/AddExpense.js","Actions/index.js","Components/Balance/Balance.js","Components/Header/Header.js","Components/AddButton/AddButton.js","Components/Dashboard/ChartTemplate.js","Components/Dashboard/ChartColors.js","Components/Dashboard/ExpenseDoughnutChart/ExpenseDoughnutChart.js","Components/Dashboard/IncomePieChart/IncomePieChart.js","Components/Dashboard/DatedExpenseBarChart/DatedExpenseBarChart.js","Components/Dashboard/DatedIncomeLineChart/DatedIncomeLineChart.js","Components/Dashboard/Dashboard.js","App.js","serviceWorker.js","Reducers/index.js","index.js"],"names":["connect","_ref","dispatch","react_default","a","createElement","className","onSubmit","e","preventDefault","expenseName","document","getElementById","value","expenseAmount","expenseType","querySelector","date","name","amount","transactionType","type","addTransaction","add","htmlFor","id","required","defaultChecked","Balance","console","log","this","props","balance","Component","state","transactions","Header","Components_Balance_Balance","AddButton","toggleAddExpense","addExpenseBlock","getElementsByClassName","checked","classList","remove","Fragment","onClick","React","ChartTemplate","options","Object","classCallCheck","data","datasets","backgroundColor","label","labels","ChartColors","lightblue","pink","lightgreen","lightgrey","lightsalmon","ExpenseDoughnutChart","config","title","display","text","responsive","shouldComponentUpdate","nextProps","_this","Array","length","fill","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","expenses","Symbol","iterator","next","done","datedExpense","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","expenseList","expense","dataIndex","indexOf","Math","abs","push","err","return","react_chartjs_2_es","redraw","IncomePieChart","incomes","datedIncomes","incomeList","transaction","DatedExpenseBarChart","scales","yAxes","ticks","min","responseive","moment","month","DatedIncomeBarChart","datedTransaction","Dashboard","Dashboard_ExpenseDoughnutChart_ExpenseDoughnutChart","Dashboard_IncomePieChart_IncomePieChart","Dashboard_DatedExpenseBarChart_DatedExpenseBarChart","DatedIncomeLineChart","App","Components_Header_Header","Components_AddExpense_AddExpense","Components_AddButton_AddButton","Components_Dashboard_Dashboard","Boolean","window","location","hostname","match","transactionCount","initialState","rootReducer","combineReducers","_objectSpread2","arguments","action","assign","datedTransactions","find","element","defineProperty","objectSpread","forEach","toConsumableArray","filter","trans","store","createStore","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b25bcf1.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTransaction } from '../../Actions';\nimport './addExpense.scss';\nimport '../../styles/commons.scss';\n\nconst AddExpense = ({dispatch}) => {\n\n    let add = (e) => {\n        e.preventDefault();\n        let expenseName = document.getElementById('expenseName').value;\n        let expenseAmount = +document.getElementById('expenseAmount').value;\n        let expenseType = document.querySelector('input[name=\"expense-type\"]:checked').value;\n        let date = document.getElementById('date').value;\n        \n        dispatch(addTransaction(expenseName, expenseAmount, date, expenseType));\n    }\n\n\n    return (\n        <div className='add-expense add-expense_hidden'>\n            <form className=\"container add-expense_form\" onSubmit={(e) => { add(e) }}>\n                <div className=\"add-expense_header\">ADD TRANSACTION</div>\n                <div className=\"container form-input\">\n                    <label htmlFor=\"date\" className=\"form-input_label\">SELECT DATE</label>\n                    <input type=\"date\" name=\"date\" id=\"date\" className=\"form-input_input\"></input>\n                </div>\n                <div className=\"container form-input form-select\">\n                    <label className=\"form-input_label\">\n                        SELECT TRANSACTION\n                        </label>\n                    <select id=\"expenseName\" className=\"form-input_input\">\n                        <option value=\"Monthly Budget\">Monthly Budget</option>\n                        <option value=\"Rent\">Rent</option>\n                        <option value=\"Groceries\">Groceries</option>\n                        <option value=\"Electricity\">Electricity</option>\n                        <option value=\"Travel\">Travel</option>\n                    </select>\n                </div>\n                <div className=\"container form-input\">\n                    <label htmlFor=\"expenseAmount\" className=\"form-input_label\">TRANSACTION AMOUNT</label>\n                    <input type=\"number\" id=\"expenseAmount\" name=\"expenseAmount\" className=\"form-input_input\" required></input>\n                </div>\n                <div className=\"container container_flex-direction_row form-radio\">\n                    <div>\n                        <input type=\"radio\" name=\"expense-type\" id=\"expense\" value=\"expense\" defaultChecked={true}></input>\n                        <label id=\"expense\" className=\"form-input_label\">EXPENSE</label>\n                    </div>\n                    <div>\n                        <input type=\"radio\" name=\"expense-type\" id=\"income\" value=\"income\" ></input>\n                        <label id=\"income\" className=\"form-input_label\">INCOME</label>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <button className=\"btn\">ADD TRANSACTION</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default connect()(AddExpense);","export const ADD_TRANSACTION = \"ADD_TRANSACTION\";\nexport const REMOVE_TRANSACTION = \"REMOVE_TRANSACTION\";\n\nexport const addTransaction = (name, amount, date, transactionType) => ({\n    type: ADD_TRANSACTION,\n    name,\n    amount,\n    date,\n    transactionType\n})\n\nexport const removeTransaction = (id, transactionType) => ({\n    type: REMOVE_TRANSACTION,\n    id,\n    transactionType\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './balance.scss'\n\nclass Balance extends Component {\n    render() {\n        console.log(\"balance\", this.props);\n        return (\n            <div className=\"balance\">\n\n                <span>Balance: <span><i className=\"fas fa-rupee-sign\"></i></span> </span>\n                {\n                    this.props.balance ? this.props.balance : 0\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        balance: state.transactions.balance\n    }\n)\n\nexport default connect(mapStateToProps)(Balance);","import React from 'react';\nimport Balance from '../Balance/Balance';\nimport './header.scss';\n\nconst Header = () => {\n    return (\n        <div className=\"container header\">\n            <div className=\"logo\">EXPENSE MANAGER</div>\n            <Balance></Balance>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './addButton.scss';\n\nclass AddButton extends React.Component {\n    toggleAddExpense = () => {\n        let addExpenseBlock = document.getElementsByClassName(\"add-expense\")[0];\n        if (document.querySelector(\".toogleExpense\").checked) {\n            addExpenseBlock.classList.remove(\"add-expense_hidden\");\n        } else {\n            addExpenseBlock.classList.add(\"add-expense_hidden\");\n        };\n    }\n\n    render() {\n        return (\n            <>\n            <label className=\"add-btn\">\n                <input type=\"checkbox\" className=\"toogleExpense\" onClick={this.toggleAddExpense} />\n                <i className=\"fa fa-plus\"></i>\n            </label>\n            </>\n        );\n    }\n}\n\nexport default AddButton;","export class ChartTemplate {\n    constructor(type, options) {\n        this.type =  type\n        this.data = {\n            datasets: [\n                {\n                    data: [\n                    ],\n                    backgroundColor: [\n                    ],\n                    label: ''\n                }\n            ],\n            labels: [\n            ]\n\n        }\n        this.options = options\n    }\n}\n","export const ChartColors = {\n    lightblue:  \"lightblue\",\n    pink:  \"pink\",\n    lightgreen:  \"lightgreen\",\n    lightgrey: \"lightgrey\",\n    lightsalmon: \"lightsalmon\"\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { ChartColors } from '../ChartColors';\n\nclass ExpenseDoughnutChart extends React.Component {\n    config = new ChartTemplate(\"pie\", {\n        title: {\n            display: true,\n            text: \"Expenses\"\n        },\n        responsive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(this.config.data.datasets[0].data.length).fill(0);\n        this.config.data.datasets[0].backgroundColor = [\n            ChartColors.pink,\n            ChartColors.lightblue,\n            ChartColors.lightgreen,\n            ChartColors.lightgrey,\n            ChartColors.lightsalmon\n        ];\n        for (let datedExpense of nextProps.expenses) {\n            for (let expense of datedExpense.expenseList) {\n                let dataIndex = this.config.data.labels.indexOf(expense.name);\n                if (dataIndex >= 0) {\n                    this.config.data.datasets[0].data[dataIndex] += Math.abs(expense.amount);\n                } else {\n                    this.config.data.labels.push(expense.name);\n                    this.config.data.datasets[0].data.push(Math.abs(expense.amount));\n                }\n            }\n        }\n\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Doughnut data={this.config.data} options={this.config.options} redraw></Doughnut>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        expenses: state.transactions.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(ExpenseDoughnutChart);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { ChartColors } from '../ChartColors'\n\nclass IncomePieChart extends React.Component {\n    config = new ChartTemplate(\"pie\", {\n        title: {\n            display: true,\n            text: \"Income\"\n        },\n        responsive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(this.config.data.datasets[0].data.length).fill(0);\n        this.config.data.datasets[0].backgroundColor = [\n            ChartColors.pink,\n            ChartColors.lightblue,\n            ChartColors.lightgreen,\n            ChartColors.lightgrey,\n            ChartColors.lightsalmon\n        ];\n        for(let datedIncomes of nextProps.incomes) {\n            for(let transaction of datedIncomes.incomeList) {\n                if(transaction.amount > 0) {\n                    let dataIndex = this.config.data.labels.indexOf(transaction.name);\n                    if(dataIndex >= 0) {\n                        this.config.data.datasets[0].data[dataIndex] += Math.abs(transaction.amount);\n                    }else {\n                        this.config.data.labels.push(transaction.name);\n                        this.config.data.datasets[0].data.push(Math.abs(transaction.amount));\n                    }\n                }\n            }\n        }\n\n        console.log(this.config);\n        return true;\n    }\n    \n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Pie data={this.config.data} options={this.config.options} redraw></Pie>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        incomes: state.transactions.incomes\n    }\n)\n\nexport default connect(mapStateToProps)(IncomePieChart);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { Bar } from \"react-chartjs-2\";\nimport { ChartColors } from '../ChartColors';\nimport * as moment from 'moment';\n\nclass DatedExpenseBarChart extends Component {\n    config = new ChartTemplate(\"line\",{\n        title: {\n            display: true,\n            text: \"Monthly Expenses\"\n        },\n        scales: {\n            yAxes: [{\n                ticks: {\n                    min: 0,\n                }\n            }]\n        },\n        responseive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(12).fill(0);\n        this.config.data.datasets[0].backgroundColor = ChartColors.lightblue;\n        this.config.data.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Octomber\", \"November\", \"December\"];\n        for (let datedExpense of nextProps.expenses) {\n            let dataIndex = moment(datedExpense.date).month();\n            for (let expense of datedExpense.expenseList) {\n                this.config.data.datasets[0].data[dataIndex] += Math.abs(expense.amount);\n            }\n        }\n        \n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Bar data={this.config.data} options={this.config.options} redraw></Bar>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        expenses: state.transactions.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(DatedExpenseBarChart);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { ChartColors } from '../ChartColors';\nimport { Line } from \"react-chartjs-2\";\nimport * as moment from 'moment';\n\nclass DatedIncomeBarChart extends Component {\n    config = new ChartTemplate(\"line\", {\n        title: {\n            display: true,\n            text: \"Monthly Income\"\n        },\n        scales: {\n            yAxes: [{\n                ticks: {\n                    min: 0,\n                }\n            }]\n        },\n        responseive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(12).fill(0);\n        this.config.data.datasets[0].backgroundColor = ChartColors.lightgrey;\n        this.config.data.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Octomber\", \"November\", \"December\"];\n        for (let datedTransaction of nextProps.incomes) {\n            let dataIndex = moment(datedTransaction.date).month();\n            for (let transaction of datedTransaction.incomeList) {\n                if (transaction.amount > 0) {\n                    this.config.data.datasets[0].data[dataIndex] += Math.abs(transaction.amount);\n                }\n            }\n        }\n        console.log(\"line chart config\", this.config);\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Line data={this.config.data} options={this.config.options}\n                    redraw></Line>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        incomes: state.transactions.incomes\n    }\n)\n\nexport default connect(mapStateToProps)(DatedIncomeBarChart);","import React, {Component} from 'react';\nimport ExpenseDoughnutChart from './ExpenseDoughnutChart/ExpenseDoughnutChart';\nimport IncomePieChart from './IncomePieChart/IncomePieChart';\nimport DatedExpenseBarChart from './DatedExpenseBarChart/DatedExpenseBarChart';\nimport DatedIncomeLineChart from './DatedIncomeLineChart/DatedIncomeLineChart';\nimport './dashboard.scss';\n\nclass Dashboard extends Component {\n    render() {\n        return (\n            <div className=\"dashboard\">\n                <ExpenseDoughnutChart></ExpenseDoughnutChart>\n                <IncomePieChart></IncomePieChart>\n                <DatedExpenseBarChart></DatedExpenseBarChart>\n                <DatedIncomeLineChart></DatedIncomeLineChart>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport './styles/commons.scss';\nimport './styles/variables.scss';\nimport AddExpense from './Components/AddExpense/AddExpense';\nimport Header from './Components/Header/Header';\nimport AddButton from './Components/AddButton/AddButton';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header></Header>\n        <AddExpense></AddExpense>\n        <AddButton></AddButton>\n        <Dashboard></Dashboard>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REMOVE_TRANSACTION, ADD_TRANSACTION } from '../Actions/index';\n\n// \n// State structure\n//\n//\n//var state = {\n//     espenses: [\n//         {\n//             date,\n//             expenseList: [\n//                 {\n//                     id,\n//                     name,\n//                     amount\n//                 }\n//             ]\n//         }\n//     ],\n//     incomes: [\n//         {\n//             date,\n//             incomeList: [\n//                 {\n//                     id,\n//                     name,\n//                     amount\n//                 }\n//             ]\n//         }\n//     ]\n// }\n\nlet transactionCount = 0;\nlet initialState = {\n    expenses: [],\n    incomes: [],\n    balance: 0\n}\n\nexport const transactions = (state = initialState, action) => {\n    let balance = state.balance;\n    switch(action.type) {\n        case ADD_TRANSACTION:\n            transactionCount++;\n            let transactions = [];\n            if(action.transactionType === \"expense\") {\n                transactions = Object.assign([], state.expenses);\n                balance -= action.amount;\n            }else {\n                transactions = Object.assign([], state.incomes);\n                balance += action.amount;\n            }\n            let datedTransactions = transactions.find(element => element.date === action.date);\n            if(datedTransactions) {\n                datedTransactions[action.transactionType + 'List'].push(\n                    {\n                        id: transactionCount,\n                        name: action.name,\n                        amount: action.amount,\n                    }\n                );\n            }else {\n                transactions.push({\n                    date: action.date,\n                    [action.transactionType + 'List']: [\n                        {\n                            id: transactionCount,\n                            name: action.name,\n                            amount: action.amount,\n                        }\n                    ]\n                });\n            }\n\n            return {\n                ...state,\n                [action.transactionType + 's']: transactions,\n                balance\n            }\n\n        case REMOVE_TRANSACTION:\n            if (action.transactionType === \"expense\") {\n                transactions = Object.assign([], state.expenses);\n            } else {\n                transactions = Object.assign([], state.incomes);\n            }\n            transactions.forEach((e) => {\n                e[action.transactionType + \"List\"] = [...e[action.transactionType + \"List\"].filter((trans) => (trans.id !== action.id))];\n            })\n            // for (let datedExpense of state) {\n            //     datedExpense.expenses = [\n            //         ...datedExpense.expenses.filter((expense) => (expense.id !== action.id))\n            //     ]\n            // }\n            break;\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { transactions } from './Reducers';\nimport {combineReducers, createStore} from'redux';\nimport {Provider} from 'react-redux';\n\nconst rootReducer = combineReducers({\n    transactions\n})\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}