{"version":3,"sources":["Components/AddExpense/AddExpense.js","Components/AddExpense/Actions.js","Components/Balance/Balance.js","Components/Header/Header.js","Components/AddButton/AddButton.js","Components/Dashboard/ChartTemplate.js","Components/Dashboard/ChartColors.js","Components/Dashboard/ExpenseDoughnutChart/ExpenseDoughnutChart.js","Components/Dashboard/IncomePieChart/IncomePieChart.js","Components/Dashboard/DatedExpenseBarChart/DatedExpenseBarChart.js","Components/Dashboard/DatedIncomeLineChart/DatedIncomeLineChart.js","Components/Dashboard/Dashboard.js","App.js","serviceWorker.js","Components/AddExpense/expense-reducer.js","index.js"],"names":["connect","_ref","dispatch","react_default","a","createElement","className","onSubmit","e","preventDefault","expenseName","document","getElementById","value","expenseAmount","expenseType","querySelector","date","name","amount","id","type","addExpense","add","htmlFor","required","defaultChecked","state","expenseList","expenses","balance","forEach","element","expense","getBalance","Header","Components_Balance_Balance","AddButton","toggleAddExpense","addExpenseBlock","getElementsByClassName","checked","classList","remove","onClick","this","React","Component","ChartTemplate","options","Object","classCallCheck","data","datasets","backgroundColor","label","labels","ChartColors","lightblue","pink","lightgreen","lightgrey","lightsalmon","ExpenseDoughnutChart","config","title","display","text","responsive","shouldComponentUpdate","nextProps","_this","Array","length","fill","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","datedExpense","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","dataIndex","indexOf","Math","abs","push","err","return","react_chartjs_2_es","redraw","IncomePieChart","DatedExpenseBarChart","scales","yAxes","ticks","min","responseive","moment","month","DatedIncomeLineChart","Dashboard","Dashboard_ExpenseDoughnutChart_ExpenseDoughnutChart","Dashboard_IncomePieChart_IncomePieChart","Dashboard_DatedExpenseBarChart_DatedExpenseBarChart","Dashboard_DatedIncomeLineChart_DatedIncomeLineChart","App","Fragment","Components_Header_Header","Components_AddExpense_AddExpense","Components_AddButton_AddButton","Components_Dashboard_Dashboard","Boolean","window","location","hostname","match","expenseCount","rootReducer","combineReducers","arguments","action","assign","datedExpenses","find","toConsumableArray","filter","store","createStore","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d75cacb.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { addExpense } from './Actions';\nimport './addExpense.scss';\nimport '../../styles/commons.scss';\n\nconst AddExpense = ({dispatch}) => {\n\n    let add = (e) => {\n        e.preventDefault();\n        let expenseName = document.getElementById('expenseName').value;\n        let expenseAmount = document.getElementById('expenseAmount').value;\n        let expenseType = document.querySelector('input[name=\"expense-type\"]:checked').value;\n        let date = document.getElementById('date').value;\n        dispatch(addExpense(expenseName, expenseAmount, expenseType, date));\n    }\n\n\n    return (\n        <div className='add-expense add-expense_hidden'>\n            <form className=\"container add-expense_form\" onSubmit={(e) => { add(e) }}>\n                <div className=\"add-expense_header\">ADD EXPENSE</div>\n                <div className=\"container form-input\">\n                    <label htmlFor=\"date\" className=\"form-input_label\">SELECT DATE</label>\n                    <input type=\"date\" name=\"date\" id=\"date\" className=\"form-input_input\"></input>\n                </div>\n                <div className=\"container form-input form-select\">\n                    <label className=\"form-input_label\">\n                        SELECT EXPENSE\n                        </label>\n                    <select id=\"expenseName\" className=\"form-input_input\">\n                        <option value=\"Monthly Budget\">Monthly Budget</option>\n                        <option value=\"Rent\">Rent</option>\n                        <option value=\"Groceries\">Groceries</option>\n                        <option value=\"Electricity\">Electricity</option>\n                        <option value=\"Travel\">Travel</option>\n                    </select>\n                </div>\n                <div className=\"container form-input\">\n                    <label htmlFor=\"expenseAmount\" className=\"form-input_label\">EXPENSE AMOUNT</label>\n                    <input type=\"Number\" id=\"expenseAmount\" name=\"expenseAmount\" className=\"form-input_input\" required></input>\n                </div>\n                <div className=\"container container_flex-direction_row form-radio\">\n                    <div>\n                        <input type=\"radio\" name=\"expense-type\" id=\"expense\" value=\"expense\" defaultChecked={true}></input>\n                        <label id=\"expense\" className=\"form-input_label\">EXPENSE</label>\n                    </div>\n                    <div>\n                        <input type=\"radio\" name=\"expense-type\" id=\"income\" value=\"income\" ></input>\n                        <label id=\"income\" className=\"form-input_label\">INCOME</label>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <button className=\"btn\">ADD EXPENSE</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default connect()(AddExpense);","export const addExpense = (name, amount, expenseType, date, id) => ({\n    type: \"ADD_EXPENSE\",\n    amount,\n    name,\n    expenseType,\n    date\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport './balance.scss'\n\n;let getBalance = (expenseList) => {\n    let balance = 0\n    expenseList.forEach(element => {\n        element.expenses.forEach(expense =>{\n            balance += +expense.amount;\n        });\n    });\n\n    return balance;\n}\nconst Balance = ({expenseList}) => {\n    return (\n        <div className=\"balance\">\n            <span>Balance: </span>\n            {\n                getBalance(expenseList)\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => (\n    {\n        expenseList: state.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(Balance);","import React from 'react';\nimport Balance from '../Balance/Balance';\nimport './header.scss';\n\nconst Header = () => {\n    return (\n        <div className=\"container header\">\n            <div className=\"logo\">EXPENSE MANAGER</div>\n            <Balance></Balance>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './addButton.scss';\n\nclass AddButton extends React.Component {\n    toggleAddExpense = () => {\n        let addExpenseBlock = document.getElementsByClassName(\"add-expense\")[0];\n        if (document.querySelector(\".toogleExpense\").checked) {\n            addExpenseBlock.classList.remove(\"add-expense_hidden\");\n        } else {\n            addExpenseBlock.classList.add(\"add-expense_hidden\");\n        };\n    }\n\n    render() {\n        return (\n            <label className=\"add-btn\">\n                <input type=\"checkbox\" className=\"toogleExpense\" onClick={this.toggleAddExpense} />\n                <i className=\"fa fa-plus\"></i>\n            </label>\n        );\n    }\n}\n\nexport default AddButton;","export class ChartTemplate {\n    constructor(type, options) {\n        this.type =  type\n        this.data = {\n            datasets: [\n                {\n                    data: [\n                    ],\n                    backgroundColor: [\n                    ],\n                    label: ''\n                }\n            ],\n            labels: [\n            ]\n\n        }\n        this.options = options\n    }\n}\n","export const ChartColors = {\n    lightblue:  \"lightblue\",\n    pink:  \"pink\",\n    lightgreen:  \"lightgreen\",\n    lightgrey: \"lightgrey\",\n    lightsalmon: \"lightsalmon\"\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { ChartColors } from '../ChartColors';\n\nclass ExpenseDoughnutChart extends React.Component {\n    config = new ChartTemplate(\"pie\", {\n        title: {\n            display: true,\n            text: \"Expenses\"\n        },\n        responsive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(this.config.data.datasets[0].data.length).fill(0);\n        this.config.data.datasets[0].backgroundColor = [\n            ChartColors.pink,\n            ChartColors.lightblue,\n            ChartColors.lightgreen,\n            ChartColors.lightgrey,\n            ChartColors.lightsalmon\n        ];\n        for (let datedExpense of nextProps.expenseList) {\n            for (let expense of datedExpense.expenses) {\n                if (expense.amount < 0) {\n                    let dataIndex = this.config.data.labels.indexOf(expense.name);\n                    if (dataIndex >= 0) {\n                        this.config.data.datasets[0].data[dataIndex] += Math.abs(expense.amount);\n                    } else {\n                        this.config.data.labels.push(expense.name);\n                        this.config.data.datasets[0].data.push(Math.abs(expense.amount));\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Doughnut data={this.config.data} options={this.config.options} redraw></Doughnut>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        expenseList: state.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(ExpenseDoughnutChart);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { ChartColors } from '../ChartColors'\n\nclass IncomePieChart extends React.Component {\n    config = new ChartTemplate(\"pie\", {\n        title: {\n            display: true,\n            text: \"Income\"\n        },\n        responsive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(this.config.data.datasets[0].data.length).fill(0);\n        this.config.data.datasets[0].backgroundColor = [\n            ChartColors.pink,\n            ChartColors.lightblue,\n            ChartColors.lightgreen,\n            ChartColors.lightgrey,\n            ChartColors.lightsalmon\n        ];\n        for(let datedExpense of nextProps.expenseList) {\n            for(let expense of datedExpense.expenses) {\n                if(expense.amount > 0) {\n                    let dataIndex = this.config.data.labels.indexOf(expense.name);\n                    if(dataIndex >= 0) {\n                        this.config.data.datasets[0].data[dataIndex] += Math.abs(expense.amount);\n                    }else {\n                        this.config.data.labels.push(expense.name);\n                        this.config.data.datasets[0].data.push(Math.abs(expense.amount));\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n    \n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Pie data={this.config.data} options={this.config.options} redraw></Pie>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        expenseList: state.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(IncomePieChart);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { Bar } from \"react-chartjs-2\";\nimport { ChartColors } from '../ChartColors';\nimport * as moment from 'moment';\n\nclass DatedExpenseBarChart extends Component {\n    config = new ChartTemplate(\"line\",{\n        title: {\n            display: true,\n            text: \"Monthly Income\"\n        },\n        scales: {\n            yAxes: [{\n                ticks: {\n                    min: 0,\n                }\n            }]\n        },\n        responseive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(12).fill(0);\n        this.config.data.datasets[0].backgroundColor = ChartColors.lightblue;\n        this.config.data.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Octomber\", \"November\", \"December\"];\n        for (let datedExpense of nextProps.expenseList) {\n            let dataIndex = moment(datedExpense.date).month();\n            for (let expense of datedExpense.expenses) {\n                if (expense.amount < 0) {\n                    this.config.data.datasets[0].data[dataIndex] += Math.abs(expense.amount);\n                }\n            }\n        }\n        \n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Bar data={this.config.data} options={this.config.options} redraw></Bar>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        expenseList: state.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(DatedExpenseBarChart);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChartTemplate } from '../ChartTemplate';\nimport { ChartColors } from '../ChartColors';\nimport { Bar } from \"react-chartjs-2\";\nimport * as moment from 'moment';\n\nclass DatedIncomeLineChart extends Component {\n    config = new ChartTemplate(\"line\", {\n        title: {\n            display: true,\n            text: \"Monthly Income\"\n        },\n        scales: {\n            yAxes: [{\n                ticks: {\n                    min: 0,\n                }\n            }]\n        },\n        responseive: true\n    });\n\n    shouldComponentUpdate = (nextProps) => {\n        this.config.data.datasets[0].data = new Array(12).fill(0);\n        this.config.data.datasets[0].backgroundColor = ChartColors.lightblue;\n        this.config.data.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Octomber\", \"November\", \"December\"];\n        for (let datedExpense of nextProps.expenseList) {\n            let dataIndex = moment(datedExpense.date).month();\n            for (let expense of datedExpense.expenses) {\n                if (expense.amount > 0) {\n                    this.config.data.datasets[0].data[dataIndex] += Math.abs(expense.amount);\n                }\n            }\n        }\n        \n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Bar data={this.config.data} options={this.config.options}\n                    redraw></Bar>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => (\n    {\n        expenseList: state.expenses\n    }\n)\n\nexport default connect(mapStateToProps)(DatedIncomeLineChart);","import React, {Component} from 'react';\nimport ExpenseDoughnutChart from './ExpenseDoughnutChart/ExpenseDoughnutChart';\nimport IncomePieChart from './IncomePieChart/IncomePieChart';\nimport DatedExpenseBarChart from './DatedExpenseBarChart/DatedExpenseBarChart';\nimport DatedIncomeLineChart from './DatedIncomeLineChart/DatedIncomeLineChart';\nimport './dashboard.scss';\n\nclass Dashboard extends Component {\n    render() {\n        return (\n            <div className=\"dashboard\">\n                <ExpenseDoughnutChart></ExpenseDoughnutChart>\n                <IncomePieChart></IncomePieChart>\n                <DatedExpenseBarChart></DatedExpenseBarChart>\n                <DatedIncomeLineChart></DatedIncomeLineChart>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport './styles/commons.scss';\nimport './styles/variables.scss';\nimport AddExpense from './Components/AddExpense/AddExpense';\nimport Header from './Components/Header/Header';\nimport AddButton from './Components/AddButton/AddButton';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header></Header>\n        <AddExpense></AddExpense>\n        <AddButton></AddButton>\n        <Dashboard></Dashboard>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let expenseCount = 0;\nexport const expenses = (state = [], action) => {\n    switch (action.type) {\n        case \"ADD_EXPENSE\":\n            expenseCount++;\n            if (action.expenseType === \"expense\") {\n                action.amount = -action.amount;\n            }\n            \n            let expenseList = [];\n            Object.assign(expenseList, state);\n            let datedExpenses = expenseList.find(element => element.date === action.date);\n\n            if (datedExpenses) {\n                datedExpenses.expenses.push({\n                    name: action.name,\n                    type: action.expenseType,\n                    amount: action.amount,\n                    id: expenseCount\n                });\n            } else {\n                expenseList.push({\n                    date: action.date,\n                    expenses: [{\n                        name: action.name,\n                        type: action.expenseType,\n                        amount: action.amount,\n                        id: expenseCount\n                    }]\n                });\n            }\n\n            return expenseList;\n        case \"REMOVE_EXPENSE\":\n            for (let datedExpense of state) {\n                datedExpense.expenses = [\n                    ...datedExpense.expenses.filter((expense) => (expense.id !== action.id))\n                ]\n            }\n\n            return Object.assign([], state.filter(function (element) {\n                return element.expenses.length !== 0;\n            }));\n        default:\n            return state;\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {expenses} from './Components/AddExpense/expense-reducer';\nimport {combineReducers, createStore} from'redux';\nimport {Provider} from 'react-redux';\n\nconst rootReducer = combineReducers({\n    expenses\n})\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}